# COMP1521 18s1 Exam Q1
# int isIdent(int matrix[N][N], int N)

   .text
   .globl isIdent

# params: matrix=$a0, N=$a1
isIdent:
# prologue
   addi $sp, $sp, -4
   sw   $fp, ($sp)
   la   $fp, ($sp)
   addi $sp, $sp, -4
   sw   $ra, ($sp)
   addi $sp, $sp, -4
   sw   $s0, ($sp)
   addi $sp, $sp, -4
   sw   $s1, ($sp)
   addi $sp, $sp, -4
   sw   $s2, ($sp)
   addi $sp, $sp, -4
   sw   $s3, ($sp)
   # if you need to save more than four $s? registers
   # add extra code here to save them on the stack

# ... your code for the body of isIdent(m,N) goes here ...

# local vars: t0 = i, t1 = j

    li $t0, 0 # i = 0.
   for_i:
        bge $t0, $a1, end_i
        li $t1, 0 # j = 0.
        
   for_j:
        bge $t1, $a1, end_j
        
        # create m[i][j] -- [i][j] = ((i * N) + j) * size
        mul $t2, $t0, $a1 # t2 = i * N
        add $t2, $t2, $t1 # t2 = (i * N) + j
        li $t3, 4
        mul $t2, $t2, $t3 # t2 = ((i * N) + j) * 4
        
        # load matrix.
        add $t2, $t2, $a0
        lw $t2, ($t2) # t2 = m[i][j]
        
        bne $t0, $t1, cond
        # check if t2 == 1 or not.
        li $t3, 1
        beq $t2, $t3, continue
        li $v0, 0
        j return
        
   cond:
        # check if t2 == 0 or not.
        beqz $t2, continue
        li $v0, 0
        j return
        
   continue:
        addi $t1, $t1, 1
        j for_j
        
   end_j:
        addi $t0, $t0, 1
        j for_i
   end_i:
        li $v0, 1
        
   return:# epilogue
   # if you saved more than six $s? registers
   # add extra code here to restore them
   lw   $s3, ($sp)
   addi $sp, $sp, 4
   lw   $s2, ($sp)
   addi $sp, $sp, 4
   lw   $s1, ($sp)
   addi $sp, $sp, 4
   lw   $s0, ($sp)
   addi $sp, $sp, 4
   lw   $ra, ($sp)
   addi $sp, $sp, 4
   lw   $fp, ($sp)
   addi $sp, $sp, 4
   j    $ra
